"""
2. Написать функцию currency_rates(), принимающую в качестве аргумента код валюты (например, USD, EUR, GBP, ...) и возвращающую курс этой валюты по отношению к рублю. 
Использовать библиотеку requests. В качестве API можно использовать http://www.cbr.ru/scripts/XML_daily.asp. 
Рекомендация: выполнить предварительно запрос к API в обычном браузере, посмотреть содержимое ответа. Можно ли, используя только методы класса str, решить поставленную задачу? 
Функция должна возвращать результат числового типа, например float. Подумайте: есть ли смысл для работы с денежными величинами использовать вместо float тип Decimal? 
Сильно ли усложняется код функции при этом? Если в качестве аргумента передали код валюты, которого нет в ответе, вернуть None. 
Можно ли сделать работу функции не зависящей от того, в каком регистре был передан аргумент? В качестве примера выведите курсы доллара и евро.
3. * (вместо 2) Доработать функцию currency_rates(): теперь она должна возвращать кроме курса дату, которая передаётся в ответе сервера. Дата должна быть в виде объекта date. 
Подумайте, как извлечь дату из ответа, какой тип данных лучше использовать в ответе функции?
"""

from datetime import datetime
from decimal import Decimal
from requests import get

def get_url_content(url):
    response = get(url)
    if response.status_code == 200:
        return response.content.decode(encoding=response.encoding)

def currency_rates(cntnt, *currency_names):
    rslt = []
    first_bracket_idx = cntnt.find('Date="') + 6
    srv_date = datetime.strptime(cntnt[first_bracket_idx:first_bracket_idx + 10], '%d.%m.%Y')
    for currency_name in currency_names:
        rate = None
        if currency_name:
            currency_idx = cntnt.find(f'<CharCode>{currency_name.upper()}')
            if currency_idx != -1:
                currency_rate_idx_start = cntnt.find('<Value>', currency_idx) + 7
                currency_rate_idx_end = cntnt.find('</Value>', currency_idx)
                rate = Decimal(cntnt[currency_rate_idx_start:currency_rate_idx_end].replace(',', '.'))
        rslt.append({'srv_date': srv_date, 'rate': rate})
    return rslt
def currency_rate_print_format_str(currency_name, currency_rate_dict):
    print('{srv_date:%d.%m.%Y} {0} = {rate}'.format(currency_name.upper() if currency_name else None, **currency_rate_dict))

def print_currencies(cntnt, *currency_names):

    for i in zip(currency_names, currency_rates(cntnt, *currency_names)):
        currency_rate_print_format_str(*i)

if __name__ == '__main__':
    content = get_url_content('http://www.cbr.ru/scripts/XML_daily.asp')
    if content:
        currencys = 'usd'
        print_currencies(content, currencys)
        print('---')
        currency = ('eur', 'GBP', 'у.е.')
        print_currencies(content, *currency)
        print('---')
        currency = None
        print_currencies(content, currency)

"""
4. Написать свой модуль utils и перенести в него функцию currency_rates() из предыдущего задания.
Создать скрипт, в котором импортировать этот модуль и выполнить несколько вызовов функции currency_rates(). Убедиться, что ничего лишнего не происходит.
5. * (вместо 4) Доработать скрипт из предыдущего задания: теперь он должен работать и из консоли. Например:
> python task_4_5.py USD
75.18, 2020-09-05
"""

import utils
import argparse

if __name__ == '__main__':

    arg_parser = argparse.ArgumentParser(description='Get CURRENCY/RUB rate')
    arg_parser.add_argument('currency', nargs='*', help='Can be "USD EUR ..."')

    args = arg_parser.parse_args()

    if not args.currency:
        args.currency = ('usd', 'eur', 'cny')
    utils.print_currencies(*args.currency)
from datetime import datetime
from decimal import Decimal

from requests import get


def get_url_content(url):
    response = get(url)
    if response.status_code == 200:
        return response.content.decode(encoding=response.encoding)


def currency_rates(cntnt, *currency_names):
    """Return [{'srv_date':datetime, 'rate':float}, ...]
    """

    rslt = []
    first_bracket_idx = cntnt.find('Date="') + 6
    srv_date = datetime.strptime(cntnt[first_bracket_idx:first_bracket_idx + 10], '%d.%m.%Y')
    for currency_name in currency_names:
        rate = None
        if currency_name:
            currency_idx = cntnt.find(f'<CharCode>{currency_name.upper()}')
            if currency_idx != -1:
                currency_rate_idx_start = cntnt.find('<Value>', currency_idx) + 7
                currency_rate_idx_end = cntnt.find('</Value>', currency_idx)
                rate = Decimal(cntnt[currency_rate_idx_start:currency_rate_idx_end].replace(',', '.'))
        rslt.append({'srv_date': srv_date, 'rate': rate})
    return rslt


def currency_rate_print_format_str(currency_name, currency_rate_dict):
    print('{srv_date:%d.%m.%Y} {0} = {rate}'.format(currency_name.upper() if currency_name else None, **currency_rate_dict))


def print_currencies(*currency_names):
    """ Return currency rates like
    18.02.2021 eur = 89.0809
    18.02.2021 GBP = 102.4401
    """
    cntnt = get_url_content('http://www.cbr.ru/scripts/XML_daily.asp')
    for i in zip(currency_names, currency_rates(cntnt, *currency_names)):
        currency_rate_print_format_str(*i)